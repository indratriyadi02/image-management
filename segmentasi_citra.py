# -*- coding: utf-8 -*-
"""SEGMENTASI CITRA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12lGsnrpxpbWrdMCdrBv6Bi8SAnS4EmWX
"""

import cv2
import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import requests

from google.colab import drive
drive.mount('/content/drive')

# membuat folder
base_dir = '/content/drive/MyDrive/Colab/Pengolahan Citra'
pc_folder = os.path.join(base_dir, "Segmentasi Citra")

if not os.path.exists(pc_folder):
  os.makedirs(pc_folder)

import cv2
import requests

def url_to_image(url):
    response = requests.get(url, stream=True).raw
    image = np.asarray(bytearray(response.read()), dtype="uint8")
    image = cv2.imdecode(image, cv2.IMREAD_COLOR)

    return image


def drive_to_image(img_id):
    url = fr"https://drive.google.com/uc?export=view&id={img_id}"
    response = requests.get(url, stream=True).raw
    image = np.asarray(bytearray(response.read()), dtype="uint8")
    image = cv2.imdecode(image, cv2.IMREAD_COLOR)

    return image

import cv2

def show_image(image, figsize=(12,12), color=cv2.COLOR_BGR2RGB, cmap=None):
    plt.figure(figsize=(12,12))
    plt.imshow(cv2.cvtColor(image, color), cmap=None), plt.xticks([]), plt.yticks([])

import numpy as np

def show_full_array(array, limit=None):
    if(limit==None):
        limit = array.shape[1]*array.shape[0]

    count = 0
    for i in array:
        for j in i:
            if (type(j) == np.ndarray):
                print(j.tolist(),end=" ")
            else:
                print(j,end=" ")

            count += 1
            if (count == limit):
                break
        else:
            print("\n")
            continue
        break

img = url_to_image("https://asset.kompas.com/crops/UZww9iUgQ6Ia2cSqFdD4e5lwYxE=/180x90:1260x810/750x500/data/photo/2019/10/16/5da6b4a19445d.png")

cv2.imwrite(os.path.join(pc_folder, "T.jpg"), img)
show_image(img)

"""**LOW PAS FILTERING**"""



CMYK = RGB2CMYK(img)

CMYK

from PIL import Image

cmyk_img = Image.fromarray(CMYK, mode="CMYK")
cmyk_img.save(os.path.join(pc_folder, "90.jpg"))

from IPython.display import Image as display_image
display_image(filename=os.path.join(pc_folder, "90.jpg"))

import numpy as np

def RGB2YCB(img):
    BGR = img.copy().astype(float)
    R = BGR[:,:,2]
    G = BGR[:,:,1]
    B = BGR[:,:,0]

    Y = (0.299 * R) + (0.587 * G) + (0.114 * B)
    Cb = ((-0.16874 * R) + (-0.33126 * G) + (0.5 * B)+128)
    Cr = ((0.5 * R) + (-0.41869 * G) + (-0.08131 * B)+128)

    YCbCr = (np.dstack((Y,Cb,Cr))).astype(np.uint8)

    return YCbCr

YCB = RGB2YCB(img)

YCB

ycb_img = Image.fromarray(YCB, mode="YCbCr")
ycb_img.save(os.path.join(pc_folder, "80.jpg"))

from IPython.display import Image as display_image
display_image(filename=os.path.join(pc_folder, "80.jpg"))

import numpy as np

def find_H_RGB2HSV(delta, Cmax, r, g, b):
    if delta==0:
        return 0
    elif Cmax == r:
        H = round(60 * (((g - b)/delta)%6))
        return H
    elif Cmax == g:
        H = round(60 * (((b - r)/delta)+2))
        return H
    elif Cmax == b:
        H = round(60 * (((r - g)/delta)+4))
        return H

vfind_H_RGB2HSV = np.vectorize(find_H_RGB2HSV, otypes=[np.int])

def RGB2HSV(img):
    rgb = img[:,:,::-1].copy()
    r = rgb[:,:,0]/255
    g = rgb[:,:,1]/255
    b = rgb[:,:,2]/255

    Cmax = np.max(rgb/255, axis=2)
    Cmin = np.min(rgb/255, axis=2)
    delta = Cmax - Cmin

    H = vfind_H_RGB2HSV(delta, Cmax, r, g, b)
    S = vfind_S_RGB2HSV(Cmax, delta) *100
    V = (Cmax * 100)

    HSV = np.dstack(((H/360 * 255),(S/100*255),(V/100*255))).astype(np.uint8)

    return HSV

def find_S_RGB2HSV(Cmax, delta):
    if Cmax != 0:
        S = delta/Cmax
        return S
    elif Cmax==0:
        return 0 

vfind_S_RGB2HSV = np.vectorize(find_S_RGB2HSV)

HSV = RGB2HSV(img)

HSV

hsv_img = Image.fromarray(HSV, mode="RGB")
hsv_img.save(os.path.join(pc_folder, "70.jpg"))

from IPython.display import Image as display_image
display_image(filename=os.path.join(pc_folder, "70.jpg"))

def prep_rgb_RGB2LAB(rgb):
    if (rgb > 0.04045 ):
        rgb = ( ( rgb + 0.055 ) / 1.055 ) ** 2.4

        return rgb *100
    else:
        rgb = rgb / 12.92

        return rgb*100

vprep_rgb_RGB2LAB = np.vectorize(prep_rgb_RGB2LAB)

def prep_XYZ_RGB2LAB(var_XYZ):
    if ( var_XYZ > 0.008856 ):
        return var_XYZ**( 1/3 )
    else:                   
        return ( 7.787 * var_XYZ ) + ( 16 / 116 )

vprep_XYZ_RGB2LAB = np.vectorize(prep_XYZ_RGB2LAB)

def RGB2LAB(img):
    rgb = img[:,:,::-1].copy()
    r = rgb[:,:,0]/255
    g = rgb[:,:,1]/255
    b = rgb[:,:,2]/255

    r = vprep_rgb_RGB2LAB(r)
    g = vprep_rgb_RGB2LAB(g)
    b = vprep_rgb_RGB2LAB(b)

    X = (r * 0.4124) + (g * 0.3576) + (b * 0.1805)
    Y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722)
    Z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505)

    var_X = X / 95.047
    var_Y = Y / 100.0
    var_Z = Z / 108.883

    var_X = vprep_XYZ_RGB2LAB(var_X)
    var_Y = vprep_XYZ_RGB2LAB(var_Y)
    var_Z = vprep_XYZ_RGB2LAB(var_Z)

    L = ( 116 * var_Y ) - 16
    a = 500 * ( var_X - var_Y )
    b = 200 * ( var_Y - var_Z )

    Lab = np.around(np.dstack((L/100*255,a+128,b+128))).astype(np.uint8)

    return Lab

LAB = RGB2LAB(img)

LAB

lab_img = Image.fromarray(LAB, mode="RGB")
lab_img.save(os.path.join(pc_folder, "W.jpg"))

from IPython.display import Image as display_image
display_image(filename=os.path.join(pc_folder, "W.jpg"))