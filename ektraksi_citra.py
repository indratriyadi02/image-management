# -*- coding: utf-8 -*-
"""ektraksi citra

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DGKx74v47bXrE9gSG97LI1sEht7UNSoi
"""

# upload file yang sudah diunduh
# file akan disimpan sesuai dengan nama file yang diunggah
from google.colab import files
file = files.upload()

"""##Ekstraksi objek pada citra

### Menggunakan Corner Detector
"""

# upload file yang sudah diunduh
# file akan disimpan sesuai dengan nama file yang diunggah
from google.colab import files
file = files.upload()

# upload file yang sudah diunduh
# file akan disimpan sesuai dengan nama file yang diunggah
from google.colab import files
file = files.upload()

!ls

# Menggunakan Shi-Tomasi GFTT untuk deteksi ujung (corner detection)

import numpy as np
import cv2
from matplotlib import pyplot as plt

# gunakan gambar yang disediakan di eLOK
img = cv2.imread('mbappe.jpg')
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) 


# deteksi pojok dengan GFTT
corners = cv2.goodFeaturesToTrack(gray,1000,0.01,10)
corners = np.int0(corners)

# menampilkan jumlah titik terdeteksi dengan fungsi numpy (np.ndarray.shape)
print("jumlah titik terdeteksi = ", corners.shape[0])

# untuk ditampilkan di Matplotlib, urutan band dibalik
cat = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# perbesar ukuran hasil plotting 
plt.rcParams["figure.figsize"] = (20,20)

# untuk tiap pojok yang terdeteksi, munculkan pada gambar
for i in corners:
    x,y = i.ravel()
    cv2.circle(cat,(x,y),3,255,-1)
plt.imshow(cat),plt.show()

"""## Deteksi Keypoints (Feature Detection)

###  Menggunakan ORB dan KAZE
"""

# Mendownload gambar Lenna untuk contoh
#!wget https://pns2019.github.io/images/Lenna.png

import cv2
import numpy as np

# memanggil gambar berwarna
img = cv2.imread('mbappe.jpg')

# cara lain memanggil grayscale dari gambar
#img = cv2.imread('gedungpusat.jpg',0)
gray= cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# mendefinisikan KAZE descriptor
kaze = cv2.KAZE_create()
kp = kaze.detect(gray)

#kps = sorted(kp, key=lambda x: -x.response)[:32]

# computing descriptors vector
kp, dsc = kaze.compute(gray, kp)

# berapa titik yang terdeteksi?
print("jumlah titik terdeteksi = ", len(kp))

# menggambar keypoint yang berhasil diidentifikasi
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img2 = cv2.drawKeypoints(img_rgb, kp, None, color=(0,255,0), flags=0)
plt.imshow(img2), plt.show()

# Latihan ORB

import numpy as np
import cv2 
from matplotlib import pyplot as plt

# membaca citra
img = cv2.imread('mbappe.jpg',0)

# membuat ORB detector
orb = cv2.ORB_create()

# kp: variabel untuk menyimpan keypoint yang berhasil dideteksi
kp = orb.detect(img,None)

# menghitung deskriptor
# kp = keypoints
# des = descriptor
kp, des = orb.compute(img, kp)

# berapa jumlah titik terdeteksi?
print("jumlah titik terdeteksi = ", len(kp))

# menggambar keypoint yang berhasil diidentifikasi 
img2 = cv2.drawKeypoints(img_rgb, kp, None, color=(0,255,0), flags=0)  # img_rbg dari variabel sebelumnya di atas
plt.imshow(img2), plt.show()

"""### Menggunakan SIFT dan SURF

"""

# untuk menjalankan fungsi detektor SIFT, SURF dan ORB pada OpenCV,
# terlebih dahulu uninstall OpenCV versi 4 yang secara default terinstall
# pada Google Colab, kemudian lakukan kembali instalasi versi OpenCV 
# yang lebih rendah sehingga fungsi SIFT dkk dapat digunakan

!pip uninstall opencv-python -y

# Downgrade versi OpenCV menjadi versi 3
!pip install opencv-contrib-python==3.4.2.17 --force-reinstall

# Melakukan deteksi keypoint dengan algoritma SIFT

import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mbappe.jpg')
# konversi ke warna abu2 agar menjadi satu band
gray= cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# menghitung fitur dengan SIFT
sift = cv2.xfeatures2d.SIFT_create()
kp = sift.detect(gray, None)

# berapa jumlah titik terdeteksi?
print("jumlah titik terdeteksi= ", len(kp))

# perbesar ukuran hasil plotting 
plt.rcParams["figure.figsize"] = (20,20)

# menggambar keypoint yang berhasil diidentifikasi 
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img3 =cv2.drawKeypoints(img_rgb,kp,img,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
plt.imshow(img3), plt.show()

"""### Latihan 4: Feature Detection and Matching


"""

# Contoh Script untuk feature detection and Matching
# Modifikasi script ini untuk mencoba metode yang berbeda 

import numpy as np
import cv2
from matplotlib import pyplot as plt

# Gunakan gambar dari eLOK
img1 = cv2.imread('mbappe.jpg')          # gambar yang dituju
img2 = cv2.imread('mbappe1.jpg')             # gambar yang dicari
gray1= cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)
gray2= cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)

# Menggunakan Detector SIFT
sift = cv2.xfeatures2d.SIFT_create()

# Mencari Keypoint dengan SIFT
kp1, des1 = sift.detectAndCompute(gray1,None)
kp2, des2 = sift.detectAndCompute(gray2,None)

# Melakukan Matching dari hasil deteksi keypoints menggunakan
# BruteForce Matcher
bf = cv2.BFMatcher()
matches = bf.knnMatch(des1,des2, k=2)

# Uji rasio matching sederhana
good = []
for m,n in matches:
    if m.distance < 0.5*n.distance:
        good.append([m])
img3 = None

# menggambar hasil match pada gambar baru (IMG3)
img3 = cv2.drawMatchesKnn(img1,kp1,img2,kp2,good,img3,flags=2)
plt.imshow(cv2.cvtColor(img3, cv2.COLOR_BGR2RGB)),plt.show()